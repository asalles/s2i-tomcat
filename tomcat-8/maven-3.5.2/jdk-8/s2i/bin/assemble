#!/bin/bash

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.
# /opt/s2i/destination/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ "$(ls -A /opt/s2i/destination/artifacts/ 2>/dev/null)" ]; then
    echo -n " Restoring saved artifacts from prior build..."
    mv /opt/s2i/destination/artifacts/.m2/repository $HOME/.m2
  fi
}

# Source code provided to S2I is at ${HOME}
LOCAL_SOURCE_DIR=${HOME}
mkdir -p $LOCAL_SOURCE_DIR
echo "LOCAL_SOURCE_DIR: $LOCAL_SOURCE_DIR"
# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build
# artifacts (*.war, *.jar)
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

# Resulting WAR files will be deployed to $CATALINA_HOME/standalone/deployments
DEPLOY_DIR=$CATALINA_HOME/webapps
mkdir -p $DEPLOY_DIR
echo "DEPLOY_DIR: $DEPLOY_DIR"
echo `pwd && cat $LOCAL_SOURCE_DIR/pom.xml && ls -ls $LOCAL_SOURCE_DIR/src`
# Copy the source for compilation
cp -Rf /opt/s2i/destination/src/. $LOCAL_SOURCE_DIR
chgrp -R 0 $LOCAL_SOURCE_DIR
chmod -R g+rw $LOCAL_SOURCE_DIR

echo "LISTANDO DIR ACTUAL: `pwd` `ls -ls ./*`"
echo "LISTANDO LOCAL_SOURCE_DIR: `ls -ls $LOCAL_SOURCE_DIR/*`"
echo "CATALINa_HOME: $CATLINA_HOME"
ls $CATALINA_HOME/..
find / -iname *serv*
echo "----------"
echo "ls OPT  `ls /opt/*`"
# If a pom.xml is present, this is a normal build scenario
# so run maven.
echo "FIND POM PATH: `find -name *pom*`"
if [ "$WAR_NAME" == "" ]; then
  echo "WAR_NAME es vacio lo voy a cambiar a  este valor *.war"
  WAR_NAME=*.war
else
  echo "WAR_NAME Tiene valor"
fi

echo "WAR_NAME 1: ----$WAR_NAME-----"
echo "-------  BUSCANDO POM.XML"
if [ -f "$LOCAL_SOURCE_DIR/$POM_PATH/pom.xml" ]; then
  echo "-------------------------------- ENCONTRO POM.XML --------"
  if [ -z "$INCREMENTAL" ]; then
    export INCREMENTAL=true
  fi

  if [[ "$INCREMENTAL" = "true" ]]; then 
    # restore any maven dependencies which will be present if this is an
    # incremental build
    echo -n "INCREMENTAL is set to $INCREMENTAL, we are restoring cached workspace containing .m2..."
    restore_saved_artifacts
    echo " restored"
  fi

  pushd $LOCAL_SOURCE_DIR/$POM_PATH &> /dev/null
  echo "----- list donde se va a compilar $LOCAL_SOURCE_DIR/$POM_PATH, `ls $LOCAL_SOURCE_DIR/$POM_PATH`"

  if [ -z "$MAVEN_ARGS" ]; then
    #export MAVEN_ARGS="clean install -DskipTests"
    export MAVEN_ARGS="package -DskipTests"
  fi

  # If MAVEN_SETTINGS specified will always add to MAVEN_ARGS
  # Can be relative to application root
  # Can be global to image
  if [ -z "$MAVEN_SETTINGS" ]; then
    export CLASSPATH=/tomcat/lib
    export MAVEN_ARGS="$MAVEN_ARGS -s $HOME/.m2/settings.xml"
  else
    if [[ "$MAVEN_SETTINGS" = /* ]]; then
       [ ! -e "$MAVEN_SETTINGS" ] && echo "Specified settings file does not exist in the image. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $MAVEN_SETTINGS"
    else
       [ ! -e "$LOCAL_SOURCE_DIR/$MAVEN_SETTINGS" ] && echo "Specified settings file does not exist in your source code. [$MAVEN_SETTINGS]" && exit 1
       export MAVEN_ARGS="$MAVEN_ARGS -s $LOCAL_SOURCE_DIR/$MAVEN_SETTINGS"
   fi
  fi

  #Append user provided args
  if [ -n "$MAVEN_ARGS_APPEND" ]; then
    export MAVEN_ARGS="$MAVEN_ARGS $MAVEN_ARGS_APPEND"
  fi
  echo " Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"
  echo "MaVen VERSiON"
  mvn --version
  #echo "MAVEN INPECCIONANDO CLASSPATH  --------------------------------------------"
  #mvn dependency:build-classpath $MAVEN_ARGS
  echo "ANTES de COMPILAR"
  mvn $MAVEN_ARGS

  echo "FIND WAR_NAME 1: `find -name $WAR_NAME`"
  echo "LS MAVEN DIRECTORY: `ls $HOME/.m2/*`"
  echo "FIND servlets from maven DIRECTORY: `find $HOME/.m2/ -iname *serv*`"
  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from mvn $MAVEN_ARGS"
    exit $ERR
  fi

  echo -n "Cleaning $DEPLOY_DIR..."
  rm -rf $DEPLOY_DIR/*
  echo " cleaned up"

  if [ ! -z `find -name $WAR_NAME` ]
  then
    echo "Moving built war file `find -name $WAR_NAME` into $DEPLOY_DIR for later deployment..."
    mv `find -name $WAR_NAME` $DEPLOY_DIR/ROOT.war
  else
    echo "Aborting due to error : File not found, moving $WAR_NAME file, maybe it doesn't exist"
    exit 1
  fi

  if [[ "$INCREMENTAL" = "false" ]]; then
    echo -n "INCREMENTAL is set to $INCREMENTAL, we are now cleaning image \"rm -rf . .m2\"..."
    rm -rf ./* .m2
    echo " cleaned up"
  fi
  popd &> /dev/null
else
  echo "Moving binaries in source directory into $DEPLOY_DIR for later deployment..."
  mv `find -name $WAR_NAME` $DEPLOY_DIR/ROOT.war
  
  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from moving $WAR_NAME file, maybe it doesn't exist "
    exit $ERR
  fi
fi

echo "...done"

exit $rc
